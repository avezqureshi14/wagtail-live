{"version":3,"file":"main.js","mappings":"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","sources":["webpack://wagtail_live/./src/wagtail_live/webapp/static_src/js/utils/bind_upload_events.js","webpack://wagtail_live/./src/wagtail_live/webapp/static_src/js/utils/show_notif.js","webpack://wagtail_live/./src/wagtail_live/webapp/static_src/js/utils/fetch_helper.js","webpack://wagtail_live/./src/wagtail_live/webapp/static_src/js/utils/live_post.js","webpack://wagtail_live/./src/wagtail_live/webapp/static_src/js/channels.js","webpack://wagtail_live/./src/wagtail_live/webapp/static_src/js/messages.js"],"sourcesContent":["export default function bindUploadEvents(\n    uploadImageButton,\n    uploadImageSelect,\n    uploadCountDiv\n) {\n    uploadImageButton.addEventListener(\"click\", () => {\n        uploadImageSelect.click();\n    });\n    uploadImageSelect.addEventListener(\"change\", () => {\n        const count = uploadImageSelect.files.length;\n        uploadCountDiv.innerHTML = `${count} image${\n            count > 1 ? \"s\" : \"\"\n        } uploaded.`;\n    });\n}\n","const toShow = [];\n\nexport default function showNotif(msg, reason = 1) {\n    let currentAlert = document.getElementById(\"current-alert\");\n    if (currentAlert) {\n        toShow.push([msg, reason]);\n        return;\n    }\n\n    const notifDiv = document.createElement(\"div\");\n    notifDiv.id = \"current-alert\";\n    notifDiv.classList.add(\"alert\", \"fixed-top\");\n    notifDiv.style.transition = \"all 1s ease 0s\";\n    notifDiv.setAttribute(\"role\", \"alert\");\n    notifDiv.innerText = msg;\n    notifDiv.style.opacity = 0;\n    notifDiv.style.height = 0;\n    document.body.insertAdjacentElement(\"afterbegin\", notifDiv);\n\n    if (reason == 1) {\n        notifDiv.classList.add(\"alert-success\");\n    } else {\n        notifDiv.classList.add(\"alert-danger\");\n    }\n\n    notifDiv.style.height = \"auto\";\n    notifDiv.style.opacity = \"1\";\n    setTimeout(() => {\n        notifDiv.style.height = 0;\n        notifDiv.style.opacity = 0;\n        notifDiv.remove();\n        if (toShow.length) {\n            showNotif(...toShow.shift());\n        }\n    }, 1500);\n}\n","import showNotif from \"./show_notif\";\n\nexport default async function fetchHelper(\n    path,\n    method,\n    body,\n    expectedStatus = 200,\n    jsonContentType = true\n) {\n    const csrfToken = document.querySelector(\n        \"[name=csrfmiddlewaretoken]\"\n    ).value;\n    if (!csrfToken) {\n        throw new Error(\"No CSRF Token found.\");\n    }\n    const headers = { \"X-CSRFToken\": csrfToken };\n    if (jsonContentType) {\n        headers[\"Content-Type\"] = \"application/json\";\n    }\n\n    const fullPath = `/webapp/api/${path}`;\n    const response = await fetch(fullPath, {\n        method,\n        headers: headers,\n        body,\n    });\n\n    if (response.status != expectedStatus) {\n        // Display corresponding error message\n        const errorMsg = await response.json();\n        showNotif(Object.values(errorMsg)[0], 0);\n        return { ok: false };\n    }\n\n    return { ok: true, response: response };\n}\n","import fetchHelper from \"./fetch_helper\";\nimport showNotif from \"./show_notif\";\nimport bindUploadEvents from \"./bind_upload_events\";\n\nfunction createLivePostDiv(content) {\n    const livePostDiv = document.createElement(\"li\");\n    livePostDiv.classList.add(\"list-group-item\", \"mb-5\", \"p-0\");\n    livePostDiv.style.border = \"none\";\n    livePostDiv.innerHTML = content;\n    return livePostDiv;\n}\n\nexport class LivePost {\n    constructor(post, channelName, wrapper) {\n        this.post = post;\n        this.channelName = channelName;\n        this.wrapper = wrapper;\n        this.pk = this.post.dataset.id;\n        if (this.pk === undefined) {\n            this.pk = this.post.firstElementChild.dataset.id;\n        }\n        this.editButton = this.post.querySelector(\".show-edit-form\");\n        this.deleteButton = this.post.querySelector(\".delete-message\");\n    }\n\n    bindEvents() {\n        this.editButton.addEventListener(\"click\", this.showEditForm.bind(this));\n        this.deleteButton.addEventListener(\"click\", this.delete.bind(this));\n        this.fullyBound = false;\n    }\n\n    _bind() {\n        if (this.fullyBound) {\n            return;\n        }\n\n        this.content = this.post.querySelector(\".message-body\");\n\n        this.editForm = this.post.querySelector(\".edit-form\");\n        this.editForm.addEventListener(\"submit\", this.edit.bind(this));\n\n        this.cancelEditButton = this.post.querySelector(\".cancel-edit\");\n        this.cancelEditButton.addEventListener(\n            \"click\",\n            this.cancelEdit.bind(this)\n        );\n\n        this.uploadImageButton = this.post.querySelector(\".upload-btn\");\n        this.uploadImageSelect = this.post.querySelector(\".upload-file\");\n        this.uploadCountDiv = this.post.querySelector(\".upload-count\");\n        bindUploadEvents(\n            this.uploadImageButton,\n            this.uploadImageSelect,\n            this.uploadCountDiv\n        );\n\n        this.deleteImageButtons = this.post.querySelectorAll(\".delete-image\");\n        this.deleteImageButtons.forEach((btn) => {\n            btn.addEventListener(\"click\", this.deleteImage.bind(this));\n        });\n\n        this.fullyBound = true;\n    }\n\n    showEditForm() {\n        this._bind();\n\n        // Hide edit button.\n        this.editButton.style.display = \"none\";\n\n        // Hide post content.\n        this.content.style.display = \"none\";\n\n        // Show edit form.\n        this.editForm.style.display = \"\";\n    }\n\n    replace(newContent) {\n        const livePostDiv = createLivePostDiv(newContent);\n        this.wrapper.replaceChild(livePostDiv, this.post);\n\n        this.post = livePostDiv;\n        this.deleteButton = this.post.querySelector(\".delete-message\");\n        this.editButton = this.post.querySelector(\".show-edit-form\");\n        this.bindEvents();\n    }\n\n    cancelEdit() {\n        this.editForm.style.display = \"none\";\n        this.content.style.display = \"\";\n        this.editButton.style.display = \"\";\n    }\n\n    async edit(event) {\n        event.preventDefault();\n        const formdata = new FormData(this.editForm);\n        formdata.append(\"channel\", this.channelName);\n\n        try {\n            let result = await fetchHelper(\n                `messages/${this.pk}/`,\n                \"PUT\",\n                formdata,\n                200,\n                false\n            );\n            if (!result.ok) {\n                return;\n            }\n\n            showNotif(`Message ${this.pk} edited.`);\n            const newContent = await result.response.text();\n            this.replace(newContent);\n        } catch (error) {\n            showNotif(error, 0);\n        }\n    }\n\n    async delete() {\n        try {\n            const result = await fetchHelper(\n                `messages/${this.pk}/`,\n                \"DELETE\",\n                {},\n                204\n            );\n            if (!result.ok) {\n                return;\n            }\n\n            this.post.remove();\n            showNotif(`Message ${this.pk} deleted.`);\n        } catch (error) {\n            showNotif(error, 0);\n        }\n    }\n\n    getImage(imageID) {\n        return this.post.querySelector(`li[data-id='${imageID}']`);\n    }\n\n    async deleteImage(event) {\n        event.preventDefault();\n\n        const pk = event.currentTarget.dataset.id;\n        try {\n            const result = await fetchHelper(\n                `images/${pk}/`,\n                \"DELETE\",\n                {},\n                204\n            );\n            if (!result.ok) {\n                return;\n            }\n\n            const image = this.getImage(pk);\n            if (image) {\n                image.remove();\n            }\n            showNotif(`Image ${pk} deleted.`);\n        } catch (error) {\n            showNotif(error, 0);\n        }\n    }\n}\n\nexport async function createLivePost(event, channelName, livePostsWrapper) {\n    // Prevent default form submission\n    event.preventDefault();\n\n    const form = event.target;\n    const formdata = new FormData(form);\n    formdata.append(\"channel\", channelName);\n\n    // Send a POST request to save channel\n    try {\n        let result = await fetchHelper(\n            \"messages/\",\n            \"POST\",\n            formdata,\n            201,\n            false\n        );\n        if (!result.ok) {\n            return;\n        }\n\n        // Clear out composition fields\n        document.querySelector(\"#content\").value = \"\";\n        document.querySelector(\"#images\").value = \"\";\n        document.querySelector(\"#imagesList\").innerHTML = \"\";\n\n        showNotif(\"Message posted.\");\n\n        const content = await result.response.text();\n        const livePostDiv = createLivePostDiv(content);\n        livePostsWrapper.prepend(livePostDiv);\n        const handler = new LivePost(\n            livePostDiv,\n            channelName,\n            livePostsWrapper\n        );\n        handler.bindEvents();\n    } catch (error) {\n        showNotif(error, 0);\n    }\n}\n","import fetchHelper from \"./utils/fetch_helper\";\nimport showNotif from \"./utils/show_notif\";\n\nfunction constructChannelLink(channelName) {\n    const baseURL = `${window.location.protocol}//${window.location.host}/`;\n    return `${baseURL}webapp/channels/${channelName}/`;\n}\n\nfunction createChannelDiv(channel) {\n    const channelName = channel.channel_name;\n    const channelLink = constructChannelLink(channelName);\n    const channelDiv = document.createElement(\"div\");\n    channelDiv.classList.add(\"d-flex\");\n    channelDiv.dataset.id = channelName;\n\n    channelDiv.innerHTML = `\n        <li class=\"list-group-item list-group-item-action\">\n            <a href=\"${channelLink}\" class=\"text-decoration-none\">\n                <div class=\"d-flex flex-wrap my-1 justify-content-between\">\n                    <h5 class=\"mb-1\">#${channelName}</h5>\n                    <small class=\"text-muted\">Created now</small>\n                </div>\n                <small class=\"text-muted\">${channel.posts_count} posts</small>\n            </a>\n        </li>\n        <button type=\"button\" class=\"btn col-2 delete-btn opacity-50\" data-channel=\"${channelName}\">\n            <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\" fill=\"#B83030\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z\"/></svg>\n        </button>\n    `;\n\n    channelDiv\n        .querySelector(\".delete-btn\")\n        .addEventListener(\"click\", deleteChannel);\n    return channelDiv;\n}\n\nasync function createChannel(event) {\n    // Prevent default form submission\n    event.preventDefault();\n\n    const form = event.target;\n    const newChannelName = form.channel_name.value;\n    const regexp = /^[a-zA-Z0-9-_]+$/;\n    if (!newChannelName.match(regexp)) {\n        const errorMsg =\n            \"Channel names can only contain alphanumeric characters or - and _\";\n        showNotif(errorMsg, 0);\n\n        // Clear out composition fields\n        document.querySelector(\"#channel_name\").value = \"\";\n        return;\n    }\n\n    // Send a POST request to save channel\n    try {\n        const payload = JSON.stringify({ channel_name: newChannelName });\n        const result = await fetchHelper(\"channels/\", \"POST\", payload, 201);\n        if (!result.ok) {\n            // Clear out composition fields\n            document.querySelector(\"#channel_name\").value = \"\";\n            return;\n        }\n\n        const channel = await result.response.json();\n        showNotif(`Channel ${channel.channel_name} created.`);\n\n        const channelDiv = createChannelDiv(channel);\n        document\n            .querySelector(\"ul\")\n            .insertAdjacentElement(\"afterbegin\", channelDiv);\n\n        // Clear out composition fields\n        document.querySelector(\"#channel_name\").value = \"\";\n    } catch (error) {\n        showNotif(error, 0);\n    }\n}\n\nasync function deleteChannel(event) {\n    // Prevent default form submission\n    event.preventDefault();\n\n    const deleteChannelBtn = event.currentTarget;\n    const { channel } = deleteChannelBtn.dataset;\n\n    // Send a DELETE request to delete channel\n    try {\n        const payload = await fetchHelper(\n            `channels/${channel}/`,\n            \"DELETE\",\n            {},\n            204\n        );\n\n        if (payload.ok) {\n            showNotif(`Channel ${channel} deleted.`);\n            document.querySelector(`[data-id=${channel}]`).remove();\n        }\n    } catch (error) {\n        showNotif(error, 0);\n        return error;\n    }\n}\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const newChannelForm = document.querySelector(\"#new-channel-form\");\n    if (!newChannelForm) {\n        return;\n    }\n    newChannelForm.addEventListener(\"submit\", createChannel);\n\n    const deleteChannelBtn = document.querySelectorAll(\".delete-btn\");\n    deleteChannelBtn.forEach((btn) => {\n        btn.addEventListener(\"click\", deleteChannel);\n    });\n});\n","import bindUploadEvents from \"./utils/bind_upload_events\";\nimport { createLivePost, LivePost } from \"./utils/live_post\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const newLivePostForm = document.querySelector(\"#new-message-form\");\n    const livePostsWrapper = document.getElementById(\"live-posts\");\n    if (!newLivePostForm || !livePostsWrapper) {\n        return;\n    }\n\n    const channelName = livePostsWrapper.dataset.channel;\n    newLivePostForm.addEventListener(\"submit\", (e) => {\n        createLivePost(e, channelName, livePostsWrapper);\n    });\n\n    const uploadImageBtn = document.getElementById(\"uploadFile\");\n    const uploadImageSelect = document.getElementById(\"images\");\n    const uploadCountDiv = document.getElementById(\"imagesList\");\n    bindUploadEvents(uploadImageBtn, uploadImageSelect, uploadCountDiv);\n\n    const livePosts = Array.from(livePostsWrapper.children);\n    livePosts.forEach((livePost) => {\n        const handler = new LivePost(livePost, channelName, livePostsWrapper);\n        handler.bindEvents();\n    });\n});\n"],"names":["bindUploadEvents","uploadImageButton","uploadImageSelect","uploadCountDiv","addEventListener","click","count","files","length","innerHTML","toShow","showNotif","msg","reason","document","getElementById","push","notifDiv","createElement","id","classList","add","style","transition","setAttribute","innerText","opacity","height","body","insertAdjacentElement","setTimeout","remove","shift","async","fetchHelper","path","method","expectedStatus","jsonContentType","csrfToken","querySelector","value","Error","headers","fullPath","response","fetch","status","errorMsg","json","Object","values","ok","createLivePostDiv","content","livePostDiv","border","LivePost","constructor","post","channelName","wrapper","this","pk","dataset","undefined","firstElementChild","editButton","deleteButton","bindEvents","showEditForm","bind","delete","fullyBound","_bind","editForm","edit","cancelEditButton","cancelEdit","deleteImageButtons","querySelectorAll","forEach","btn","deleteImage","display","replace","newContent","replaceChild","event","preventDefault","formdata","FormData","append","result","text","error","getImage","imageID","currentTarget","image","createChannel","newChannelName","target","channel_name","match","payload","JSON","stringify","channel","channelDiv","channelLink","window","location","protocol","host","constructChannelLink","posts_count","deleteChannel","createChannelDiv","deleteChannelBtn","newLivePostForm","livePostsWrapper","e","form","prepend","createLivePost","Array","from","children","livePost","newChannelForm"],"sourceRoot":""}